#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("result:server");
var config = require("../config/config");
var models = require("../models");
var https = require("https");
var http = require("http");
var fs = require("fs");
var server;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.SERVER_PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
console.log("Model Sync: ", config.MODEL_SYNC);
function createAndListenToServer() {
//   {force: true} to forecfully drop and create table again
  models.sequelize.sync({
    // force: true
  }).then(function () {
    if (config.SERVER_PROTOCOL === "http") {
      app.set("port", port);
      server = http.createServer(app).listen(port);
    } else if (config.SERVER_PROTOCOL === "https") {
      app.set("port", port);
      server = https.createServer(app).listen(port);
      var sslOptions = {
        cert: fs.readFileSync(config.SSL_CERTIFICATE),
        key: fs.readFileSync(config.SSL_CERTIFICATE_KEY)
      };
      https.createServer(sslOptions, app).listen(config.SERVER_PORT);
    } else {
      console.error("Unknown server protocol: " + config.SERVER_PROTOCOL);
      process.exit(1);
    }
    console.log("App initialized and listening on port " + port);
    server.on("error", onError);
    server.on("listening", onListening);
  });
}
createAndListenToServer();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
